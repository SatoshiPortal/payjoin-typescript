import { PayjoinSenderBuilder, PayjoinHttp, PayjoinRequest, PayjoinOhttpKeys, PayjoinReceiver, PayjoinSender } from '../src/index';

const address = "bcrt1qg2yk630h3x7vjpecquny8m27pkyx547gsnu23t";
const amount = 10000000;
const directory = "https://payjo.in";
//const relay = "https://pj.bobspacebkk.com";
const relay = "https://ohttp.cakewallet.com";

async function generateMockPayjoinUri(): Promise<string> {
  // Fetch OHTTP keys
  const ohttpKeys = await PayjoinOhttpKeys.fetch(relay, directory);
  
  // Create receiver with 1 hour expiry
  const receiver = new PayjoinReceiver(
    address,
    directory,
    await ohttpKeys.toBytes(),
    relay,
    BigInt(60 * 60)
  );

  // Get fresh URI
  const uriBuilder = receiver.getPjUriBuilder();
  uriBuilder.amount(amount);
  const uri = uriBuilder.build();

  return uri;
}

const response1Hex = "";
const response1Bytes = new Uint8Array(Buffer.from(response1Hex, 'hex'));

// Add a second mock response
const response2Hex = "";

const response2Bytes = new Uint8Array(Buffer.from(response2Hex, 'hex'));

// Track which request we're on
let requestCounter = 0;

const mockPsbt = "cHNidP8BAJoCAAAAAsj3m3yOO6K+iM3Hbkcz7qcBBDjIBJAuoxYCUgdnnVwnAQAAAAD9////1o8/lfWucFegO7xfkBY8odoVpmMA5SwHQW811DyOq2kBAAAAAP3///8CgJaYAAAAAAAWABRCiW1F94m8yQc4ByZD7V4NiGpXyDtDDwAAAAAAFgAUCA2eHmsBICP7vb0lWtrwtONV0+0AAAAAAAEAmgIAAAACDn9HdlQUpZYM3ANC1UdCCE0XuoRaTUwor0KJbbNUFkEDAAAAAP3////Fvtq/YM4A/fksjJO4E16Yw3gbZ7Grm8TcKdWRTeQcPwAAAAAA/f///wKA8PoCAAAAABYAFP0LXGs4xWPLORvXJc8keqJdkP7vC0QPAAAAAAAWABSX6LeWTvz4Ode0D4X+pHGN4/rZrdwoAAABAR8LRA8AAAAAABYAFJfot5ZO/Pg517QPhf6kcY3j+tmtAQhrAkcwRAIgJvt1Nai1IgQ3g9mDblrWvK6alEPUrfDJYvecZPkP6psCICYusN+PQT0m3OvKup1VQtKwI9E9FIx4IgS/5jf014Q0ASECIaiddtHJ0kVH1GJEMn7C9KY7MljVE57VXbHgd+FC2tAAAQCaAgAAAAJknHZ7BPoeIgYZhwbnzd4miOFI6owcVKXe/SkRWbNL0wEAAAAA/f///wUqjtj4a9OYCIGBnz2d7rr+v7uAt55tjpuikbEre3NzAQAAAAD9////AkCGmAAAAAAAFgAU53oOuzU0aNlPMgX9/NXdQMyohBuAlpgAAAAAABYAFDYjiTbYhINIraYNCMGPODV3yWPjAAAAAAEBH4CWmAAAAAAAFgAUNiOJNtiEg0itpg0IwY84NXfJY+MBCGsCRzBEAiAXy9x7IO1NkWgk6npgqRuF0LOes2WR0g/QOikqjj6q1AIgWUwrQS7BTngatd9zmE7isGdOZJjwcZVUUOHsIioAgFEBIQM5ZjGNwpH3rh67dcERLi3mZtncpTnhc/MbQjQrtpj6ygAAIgIDVLt7U0yEHQvtTDlGaqEdnjreH8LBQ1ICO4m/QArQknsYw297V1QAAIABAACAAAAAgAEAAAA5AQAAAA==";
// can't have a static mock as the URI has an expiry built in
//export const mockPayjoinUri = "bitcoin:bcrt1qauwhftqrp57q200pp7wx75dfwfywrmla2v67dw?amount=0.1&pjos=0&pj=HTTPS://PAYJO.IN/ZFV5JGYXKQ3NX%23RK1QVLSWLM5USRWPADY9GQC0UMKAPSXE8GSJCYG23RHJ3WUERW08RAUC+OH1QYPM59NK2LXXS4890SUAXXYT25Z2VAPHP0X7YEYCJXGWAG6UG9ZU6NQ+EX1DRE27EC";

export class MockFetch {
  static setupGlobalFetch() {
    global.fetch = jest.fn().mockImplementation(async (url: string, init?: RequestInit) => {
      if (!init?.body) throw new Error('No body provided');
      
      // Increment counter and return appropriate response
      requestCounter++;
      
      let responseBytes;
      if (requestCounter === 1) {
        responseBytes = response1Bytes;
      } else if (requestCounter === 2) {
        responseBytes = response2Bytes;
      } else {
        throw new Error(`Unexpected request number: ${requestCounter}`);
      }

      console.debug(`Mock fetch request ${requestCounter} to ${url}`);
      
      return {
        ok: true,
        status: 200,
        arrayBuffer: async () => responseBytes.buffer,
      };
    });
  }

  static reset() {
    requestCounter = 0;
  }
}

describe('PayjoinSender', () => {
  let mockPayjoinUri: string;

  beforeAll(async () => {
    //MockFetch.reset(); // Reset counter before each test
    //MockFetch.setupGlobalFetch();
    mockPayjoinUri = await generateMockPayjoinUri();
  });

  afterEach(() => {
    jest.clearAllMocks();
  });

  describe('PayjoinSender Serialization', () => {
    let sender: PayjoinSender;
  
    beforeAll(async () => {
      mockPayjoinUri = await generateMockPayjoinUri();
      
      // Create a sender to use in tests
      const builder = PayjoinSenderBuilder.fromPsbtAndUri(mockPsbt, mockPayjoinUri);
      sender = await builder.buildRecommended(1.0);
    });
  
    describe('toJson and fromJson', () => {
      it('should serialize to JSON string', () => {
        // Get the JSON representation
        const json = sender.toJson();
        
        // Basic checks
        expect(typeof json).toBe('string');
        expect(json.length).toBeGreaterThan(0);
        
        // Should be valid JSON
        expect(() => JSON.parse(json)).not.toThrow();
        
        // JSON should contain expected properties
        const parsed = JSON.parse(json);
        expect(parsed).toHaveProperty('psbt');
        expect(parsed).toHaveProperty('endpoint');
      });
  
      it('should deserialize from JSON string', () => {
        // First serialize
        const json = sender.toJson();
        
        // Then deserialize
        const restoredSender = PayjoinSender.fromJson(json);
        
        // Should be an instance of PayjoinSender
        expect(restoredSender).toBeInstanceOf(PayjoinSender);
      });
  
      it('should preserve state after serialization and deserialization', async () => {
        // Get the JSON representation
        const json = sender.toJson();
        
        // Restore from JSON
        const restoredSender = PayjoinSender.fromJson(json);
        
        // Both senders should be able to extract v2 requests
        const originalRequest = await sender.extractV2(relay);
        const restoredRequest = await restoredSender.extractV2(relay);
        
        // Both should produce valid requests
        expect(originalRequest.url()).toBeTruthy();
        expect(restoredRequest.url()).toBeTruthy();
        expect(originalRequest.body()).toBeInstanceOf(Uint8Array);
        expect(restoredRequest.body()).toBeInstanceOf(Uint8Array);
      });
  
      it('should throw when deserializing invalid JSON', () => {
        // Test with invalid JSON string
        expect(() => {
          PayjoinSender.fromJson('{"invalid": "json"}');
        }).toThrow();
        
        // Test with non-JSON string
        expect(() => {
          PayjoinSender.fromJson('not json at all');
        }).toThrow();
      });
  
      it('should create a new instance when deserializing', () => {
        // Serialize the sender
        const json = sender.toJson();
        
        // Deserialize to a new instance
        const restoredSender = PayjoinSender.fromJson(json);
        
        // Should be a different object reference
        expect(restoredSender).not.toBe(sender);
        
        // But they should be functionally equivalent
        expect(restoredSender.toJson()).toBe(json);
      });
    });
  
    describe('round trip serde with modifications', () => {
      it('should handle configuration changes between serialization steps', async () => {
        // Create a fresh sender with output substitution disabled
        const builder = PayjoinSenderBuilder.fromPsbtAndUri(mockPsbt, mockPayjoinUri);
        builder.disableOutputSubstitution(true);
        const configuredSender = await builder.buildRecommended(1.0);
        
        // Serialize, deserialize
        const json = configuredSender.toJson();
        const restoredSender = PayjoinSender.fromJson(json);
        
        // Verify the restoredSender maintains the configuration
        const originalRequest = await configuredSender.extractV2(relay);
        const restoredRequest = await restoredSender.extractV2(relay);
        
        // Both should produce valid requests (can't directly test output substitution config,
        // but we can verify request generation works)
        expect(originalRequest.url()).toBeTruthy();
        expect(restoredRequest.url()).toBeTruthy();
      });
    });
  });

  describe('PayjoinSenderBuilder', () => {
    it('should create a sender builder from PSBT and URI', async () => {
      const builder = PayjoinSenderBuilder.fromPsbtAndUri(mockPsbt, mockPayjoinUri);
      expect(builder).toBeInstanceOf(PayjoinSenderBuilder);
    });

    it('should allow disabling output substitution', async () => {
      const builder = PayjoinSenderBuilder.fromPsbtAndUri(mockPsbt, mockPayjoinUri);
      const result = builder.disableOutputSubstitution(true);
      expect(result).toBe(builder);
    });

    it('should build recommended sender', async () => {
      const builder = PayjoinSenderBuilder.fromPsbtAndUri(mockPsbt, mockPayjoinUri);
      const sender = await builder.buildRecommended(1.0);
      expect(sender).toBeDefined();
    });

    it('should build sender with additional fee', async () => {
      const builder = PayjoinSenderBuilder.fromPsbtAndUri(mockPsbt, mockPayjoinUri);
      const sender = await builder.buildWithAdditionalFee(
        1000, // 1000 sats
        1,    // change output
        1.0,  // min fee rate
        true  // clamp fee
      );
      expect(sender).toBeDefined();
    });
  });

  describe('PayjoinV2 Flow', () => {
    // @todo before this test can succeed we need to get valid responses to the mock
    it('should handle complete v2 flow', async () => {
      // Create sender
      const builder = PayjoinSenderBuilder.fromPsbtAndUri(mockPsbt, mockPayjoinUri);
      const sender = await builder.buildRecommended(1.0);

      // First request
      const request1 = await sender.extractV2(relay);

      expect(request1.url()).toBeTruthy();
      expect(request1.body()).toBeInstanceOf(Uint8Array);

      // Send first request
      const response1Bytes = await PayjoinHttp.sendV2Request(
        request1.url(),
        request1.body()
      );

      console.debug('response1Bytes', Buffer.from(response1Bytes).toString('hex'));

      const response1 = await request1.processResponse(response1Bytes);
      expect(response1.version()).toBe("v2");

      console.debug("version", response1.version());

      // Handle v2 context
      const v2Context = response1.v2Context();

      console.debug('v2Context', v2Context);
      expect(v2Context).toBeTruthy();

      if (v2Context) {
        // Second request
        const request2 = await v2Context.extractRequest(relay);
        expect(request2.url()).toBeTruthy();
        expect(request2.body()).toBeInstanceOf(Uint8Array);

        // Send second request
        const response2Bytes = await PayjoinHttp.sendV2Request(
          request2.url(),
          request2.body()
        );

        console.debug('response2Bytes', Buffer.from(response2Bytes).toString('hex'));

        const response2 = await v2Context.processResponse(response2Bytes, request2);
        
        console.trace(response2);

        // Final response should have PSBT
        expect(response2).toBeTruthy();
      }
    }, 60000);
  });
});