/* auto-generated by NAPI-RS */
/* eslint-disable */
/**
 * Payjoin URI parser
 * */
export declare class BtcUri {
  static tryFrom(bip21: string): BtcUri
  assumeChecked(): CheckedBtcUri
}

export declare class CheckedBtcUri {
  checkPjSupported(): PayjoinUri
}

export declare class MaybeInputsOwnedWrapper {
  checkInputsNotOwned(isOwned: (arg: string) => boolean): MaybeInputsSeenWrapper
}

export declare class MaybeInputsSeenWrapper {
  checkNoInputsSeenBefore(isKnown: (arg: string) => boolean): OutputsUnknownWrapper
}

export declare class OhttpContext {

}

export declare class OutputsUnknownWrapper {
  identifyReceiverOutputs(isReceiverOutput: (arg: string) => boolean): WantsOutputsWrapper
}

export declare class PayjoinOhttpKeys {
  constructor(bytes: Uint8Array)
  static fetch(ohttpRelay: string, payjoinDirectory: string): Promise<PayjoinOhttpKeys>
  toBytes(): Uint8Array
  static fromBytes(bytes: Uint8Array): PayjoinOhttpKeys
}

export declare class PayjoinProposalWrapper {
  utxosToBeLocked(): Array<string>
  isOutputSubstitutionDisabled(): boolean
  psbt(): string
  getTxid(): string
  extractV2Req(): PayjoinRequest
  processRes(response: Uint8Array, request: PayjoinRequest): this
}

export declare class PayjoinReceiver {
  constructor(address: string, directory: string, ohttpKeys: Uint8Array, ohttpRelay: string, expirySeconds?: bigint | undefined | null)
  toJson(): string
  static fromJson(jsonStr: string): PayjoinReceiver
  pjUrl(): string
  pjUriBuilder(): PayjoinUriBuilder
  extractRequest(): PayjoinRequest
  processResponse(response: Uint8Array, request: PayjoinRequest): UncheckedProposalWrapper | null
}

export declare class PayjoinRequest {
  url(): string
  body(): Uint8Array
  post(): Promise<Uint8Array>
  processResponse(response: Uint8Array): PayjoinResponse
}

export declare class PayjoinResponse {
  version(): string
  psbt(): string | null
  v2Context(): PayjoinV2Context | null
}

export declare class PayjoinSender {
  extractV2(ohttpRelay: string): Promise<PayjoinRequest>
  toJson(): string
  static fromJson(json: string): PayjoinSender
}

export declare class PayjoinSenderBuilder {
  static fromPsbtAndUri(psbt: string, uri: string): PayjoinSenderBuilder
  disableOutputSubstitution(disable: boolean): this
  buildRecommended(minFeeRateSatPerVb: number): PayjoinSender
  buildWithAdditionalFee(maxFeeContributionSats: number, changeIndex: number | undefined | null, minFeeRateSatPerVb: number, clampFeeContribution: boolean): PayjoinSender
}

export declare class PayjoinUri {
  endpoint(): PayjoinUrl
  amount(): number | null
  address(): string | null
}

/**
 * Payjoin URI builder
 * */
export declare class PayjoinUriBuilder {
  constructor(address: string, endpoint: string)
  amount(amountSat: number): PayjoinUriBuilder
  message(message: string): PayjoinUriBuilder
  label(label: string): PayjoinUriBuilder
  disableOutputSubstitution(): PayjoinUriBuilder
  build(): string
}

export declare class PayjoinUrl {
  toString(): string
}

export declare class PayjoinV2Context {
  extractRequest(ohttpRelay: string): PayjoinRequest
  processResponse(response: Uint8Array, request: PayjoinRequest): string | null
}

export declare class ProvisionalProposalWrapper {
  getPsbt(): string
  setFinalizedPsbt(psbt: string): void
  finalizeProposal(minFeerateSatPerVb: number | undefined | null, maxFeerateSatPerVb: number | undefined | null, walletProcessPsbt: (arg: string) => string): PayjoinProposalWrapper
}

export declare class UncheckedProposalWrapper {
  originalTx(): string
  checkBroadcastSuitability(minFeeRate: number | undefined | null, canBroadcast: (arg: string) => boolean): MaybeInputsOwnedWrapper
  assumeInteractiveReceiver(): MaybeInputsOwnedWrapper
}

export declare class WantsInputsWrapper {
  tryContributeInputs(candidateInputs: Array<InputPairRequest>): ProvisionalProposalWrapper
}

export declare class WantsOutputsWrapper {
  isOutputSubstitutionDisabled(): boolean
  substituteReceiverScript(outputScript: Array<number>): WantsOutputsWrapper
  replaceReceiverOutputs(replacementOutputs: Array<ReplacementOutput>, drainScript: Array<number>): WantsOutputsWrapper
  commitOutputs(): WantsInputsWrapper
}

export interface Bip32DerivationData {
  pubkey: Array<number>
  fingerprintPath: Array<number>
  child: number
}

export interface InputPairRequest {
  prevout: TxOutpoint
  scriptSig?: Array<number>
  witness?: Array<Array<number>>
  sequence?: number
  psbtData: PsbtInputData
}

export interface PartialSigData {
  pubkey: Array<number>
  signature: Array<number>
}

export interface PsbtInputData {
  nonWitnessUtxo?: Array<number>
  witnessUtxo?: WitnessUtxoData
  partialSigs?: Array<PartialSigData>
  sighashType?: number
  redeemScript?: Array<number>
  witnessScript?: Array<number>
  bip32Derivation?: Array<Bip32DerivationData>
  finalScriptSig?: Array<number>
  finalScriptWitness?: Array<Array<number>>
}

export interface ReplacementOutput {
  script: Array<number>
  value: bigint
}

export interface TxOutpoint {
  txid: string
  vout: number
}

export interface WitnessUtxoData {
  amount: number
  scriptPubKey: string
}
